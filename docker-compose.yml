networks:
  backend:

volumes:
  mongodb_data_container:
  sspgadmin:
  ssuserdata:
  ssproductdata:
  ssorderdata:
  sspurchasedata:

services:

  mongodb:
    container_name: social_db
    image: mongo:5.0.15
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    ports:
      - "27019:27017"
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - backend

  stiktifybackend:
    container_name: stiktify-backend
    build:
        context: ./Stiktify-backend
        dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      - mongodb
    environment:
      - NODE_ENV=production
    command: npm run start:prod
    env_file: Stiktify-backend/.env

  stiktifyshopbackend:
    container_name: stiktify-shop-backend
    image: ${DOCKER_REGISTRY-}stiktifyshopbackend
    ports:
        - "8000:8081"
    build:
      context: .
      dockerfile: StiktifyShopBackend/Dockerfile
    depends_on:
        - grpcserviceuser
    networks:
        - backend

  pgadmin:
    container_name: stiktify-shop-pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@ecommerce.store}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - sspgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - backend
    restart: unless-stopped

  ssuserdata:
    container_name: user-data
    image: postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    environment:
      - POSTGRES_DB=userdb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin@123
    volumes:
      - ssuserdata:/var/lib/postgresql/data

  ssproductdata:
    container_name: product-data
    image: postgres
    ports:
      - "5433:5432"
    networks:
      - backend
    environment:
      - POSTGRES_DB=productdb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin@123
    volumes:
      - ssproductdata:/var/lib/postgresql/data

  ssorderdata:
    container_name: order-data
    image: postgres
    ports:
      - "5434:5432"
    networks:
      - backend
    environment:
      - POSTGRES_DB=orderdb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin@123
    volumes:
      - ssorderdata:/var/lib/postgresql/data

  sspurchasedata:
    container_name: purchase-data
    image: postgres
    ports:
      - "5435:5432"
    networks:
      - backend
    environment:
      - POSTGRES_DB=purchasedb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin@123
    volumes:
      - sspurchasedata:/var/lib/postgresql/data
  
  grpcserviceuser:
    container_name: grpc-service-user
    image: ${DOCKER_REGISTRY-}grpcserviceuser
    networks:
        - backend
    ports:
        - "15000:8080"
    build:
      context: .
      dockerfile: GrpcServiceUser/Dockerfile
    depends_on:
        - ssuserdata

  grpcserviceproduct:
    container_name: grpc-service-product
    image: ${DOCKER_REGISTRY-}grpcserviceproduct
    networks:
        - backend
    ports:
        - "15001:8080"
    build:
      context: .
      dockerfile: GrpcServiceProduct/Dockerfile
    depends_on:
        - ssproductdata

